@model HoiTroWebsite.Models.RoomType

@{
    ViewBag.Title = "Danh sách cho thuê";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayoutPage.cshtml";
}

<h2>Index</h2>

<div class="panel-body">
    <div class="bs-example" style="text-align:right; padding-bottom:10px;">
        <div class="btn-group">
            @Html.DropDownListFor(model => model.id, (SelectList)ViewBag.RoomType, " --- Tất cả phòng cho thuê --- ",
                new { @class = "form-control", @id = "RoomType" })
        </div>
        <button class="btn btn-success text-white" id="btnAdd">
            <a href="#" class="" data-toggle="modal" data-target="#modalRoom">
                <i class="fa fa-plus" aria-hidden="true"></i>Tạo thêm
            </a>
        </button>
        <div id="getRoom"></div>
    </div>
</div>

<div class="row">
    <div class="col-lg-12">
        <table width="100%" class="table table-striped table-bordered table-hover myTable" id="dataTables-example">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayName("STT")
                    </th>
                    <th>
                        @Html.DisplayName("Tiêu đề")
                    </th>
                    <th>
                        @Html.DisplayName("Giá cho thuê")
                    </th>
                    <th>
                        @Html.DisplayName("Diện tích")
                    </th>
                    <th>
                        @Html.DisplayName("Địa chỉ")
                    </th>
                    <th>
                        @Html.DisplayName("Meta")
                    </th>
                    <th>
                        @Html.DisplayName("Hiển thị")
                    </th>
                    <th>
                        @Html.DisplayName("Sắp xếp")
                    </th>
                    <th>
                        @Html.DisplayName("Ngày tạo")
                    </th>
                    <th>
                        @Html.DisplayName("Loại phòng")
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody id="tbroom">
            </tbody>
        </table>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="modalRoom" tabindex="-1" role="dialog" aria-labelledby="basicModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title" id="myModalLabel">Basic Modal</h4>
            </div>
            <div class="modal-body">
                @*<h3>Modal Body</h3>*@
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
@section Scripts
{
    <script>
        $(document).ready(function () {
            LoadRoom();
        })
        // Create
        $('#btnAdd').click(function () {
            $.ajax({
                url: '/Admin/RoomInfoes/Create',
                type: 'get',
                success: function (data) {
                    //console.log(data);
                    $('#modalRoom').find('.modal-body').html(data);
                },
            });
        })
        // Detail
        $(document).on('click', '.btnDetail', function () {
            var id = $(this).data('id');

            $.ajax({
                url: '/Admin/RoomInfoes/Details/' + id,
                type: 'GET',
                dataType: 'html', // Đảm bảo server trả về HTML
                success: function (data) {
                    // Hiển thị nội dung chi tiết trong modal
                    const modal = $('#modalRoom');
                    modal.find('.modal-body').html(data);
                    modal.modal('show'); // Hiển thị modal
                },
                error: function (xhr, status, error) {
                    alert('Không thể tải chi tiết room. Vui lòng thử lại.');
                    console.error('Chi tiết lỗi:', xhr.responseText || error);
                }
            });
        });
        // Edit
        $(document).on('click', '.btnEdit', function () {
            var id = $(this).data('id');

            $.ajax({
                url: '/Admin/RoomInfoes/Edit/' + id,
                type: 'get',
                success: function (data) {
                    $('#modalRoom').find('.modal-body').html(data);
                },
                error: function (xhr, status, error) {
                    console.error('Lỗi:', error);
                }
            });
        });
        // Delete
        $(document).on('click', '.btnDelete', function () {
            var id = $(this).data('id');

            $.ajax({
                url: '/Admin/RoomInfoes/Delete/' + id,
                type: 'get',
                success: function (data) {
                    $('#modalRoom').find('.modal-body').html(data);
                },
                error: function (xhr, status, error) {
                    console.error('Lỗi:', error);
                }
            });
        });
        // Load Khi dùng DropdownList
        function LoadRoom1(room) {
            const table = $('#dataTables-example').DataTable();
            table.clear(); // Xóa dữ liệu cũ trong DataTable

            // Thêm dữ liệu mới
            $.each(room, function (k, v) {
                const dateBegin = v.DateBegin === null ? '' : formatDate(v.DateBegin);
                table.row.add([
                    k + 1,
                    v.Name,
                    v.Price,
                    v.Acreage,
                    v.Address,
                    v.Meta,
                    v.Hide,
                    v.Order,
                    dateBegin,
                    v.RoomType,
                    `<button class="btn btn-xs btn-info btnDetail" data-id="${v.Id}"><i class="fa fa-info-circle" aria-hidden="true"></i><a href="#" class="" data-toggle="modal" data-target="#modalRoom"> Chi tiết </button>
                                     <button class="btn btn-xs btn-warning btnEdit" data-id="${v.Id}"><i class="fa fa-pencil-square-o" aria-hidden="true"></i><a href="#" class="" data-toggle="modal" data-target="#modalRoom"> Chỉnh sửa </button>
                                     <button class="btn btn-xs btn-danger btnDelete" data-id="${v.Id}"><i class="fa fa-trash" aria-hidden="true"></i><a href="#" class="" data-toggle="modal" data-target="#modalRoom"> Xóa </button>`
                ]);
            });

            table.draw(); // Vẽ lại bảng
        }
        // Load toàn bộ room
        function LoadRoom() {
            var roomTypeId = $('#RoomType').val(); // Lấy giá trị roomTypeid
            $.ajax({
                url: '/Admin/RoomInfoes/getRoom',
                type: 'get',
                data: { id: roomTypeId }, // Truyền roomTypeId vào data
                success: function (data) {
                    console.log(data.room)
                    if (data.code == 200) {

                        $('#tbroom').empty();
                        //console.log(data)
                        $.each(data.room, function (k, v) {
                            console.log(data.room)
                            const dateBegin = v.DateBegin === null ? '' : formatDate(v.DateBegin);

                            let tr = '<tr id="' + v.Id + '">'
                            tr += '<td>' + (k + 1) + '</td>';
                            tr += '<td>' + v.Name + '</td>';
                            tr += '<td>' + v.Price + '</td>';
                            tr += '<td>' + v.Acreage + '</td>';
                            tr += '<td>' + v.Address + '</td>';
                            tr += '<td>' + v.Meta + '</td>';
                            tr += '<td>' + v.Hide + '</td>';
                            tr += '<td>' + v.Order + '</td>';
                            tr += '<td>' + dateBegin + '</td>';
                            tr += '<td>' + v.RoomType + '</td>';
                            tr += '<td class="text-right">';
                            tr += '<button class="btn btn-xs btn-info btnDetail" data-id="' + v.Id + '"><i class="fa fa-info-circle" aria-hidden="true"></i><a href="#" class="" data-toggle="modal" data-target="#modalRoom"> Chi tiết </button>';
                            tr += '<button class="btn btn-xs btn-warning btnEdit" data-id="' + v.Id + '"><i class="fa fa-pencil-square-o" aria-hidden="true"></i><a href="#" class="" data-toggle="modal" data-target="#modalRoom"> Chỉnh sửa </button>';
                            tr += '<button class="btn btn-xs btn-danger btnDelete" data-id="' + v.Id + '"><i class="fa fa-trash" aria-hidden="true"></i><a href="#" class="" data-toggle="modal" data-target="#modalRoom"> Xóa </button>';
                            tr += '</td>';
                            tr += '</tr>';
                            $('#tbroom').append(tr);
                        });

                        if ($.fn.dataTable.isDataTable('#dataTables-example')) {

                            var table = $('#dataTables-example').DataTable();
                            table.clear();
                            table.rows.add($('#tbroom').find('tr'));
                            table.draw();
                        } else {

                            $('#dataTables-example').DataTable({
                                "paging": true,
                                "searching": true,
                                "ordering": true
                            });
                        }

                        attachEventHandlers();
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Lỗi:', error);
                }
            });
        }

        function formatDate(jsonDate) {

            const timestamp = parseInt(jsonDate.replace(/\/Date\((\d+)\)\//, '$1'));
            const date = new Date(timestamp);

            const day = date.getDate().toString().padStart(2, '0');
            const month = (date.getMonth() + 1).toString().padStart(2, '0');
            const year = date.getFullYear();

            return `${day}/${month}/${year}`;
        }

        // Submit create
        $(document).on('submit', '#form-create', function (e) {
            e.preventDefault();
            const form_data = new FormData(this);
            console.log(form_data);
            $.ajax({
                url: '/Admin/RoomInfoes/Create',
                type: 'POST',
                data: form_data,
                contentType: false,
                processData: false,
                success: function (response) {
                    console.log(response)
                    if (response.code === 200) {
                        $('#modalRoom').find('.close').click();
                        LoadRoom();
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Lỗi:', error);
                    // xử lý lỗi ràng buộc not null
                    $('#modalRoom').find('.modal-body').html(xhr.responseText);
                    // khi gọi view Create Ckeditor cần phải tạo lại
                    $('#modalRoom').find('textarea').each(function () {
                        var id = $(this).attr('id');
                        if (CKEDITOR.instances[id]) {
                            CKEDITOR.instances[id].destroy(true);
                            // Hủy CKEditor instance nếu tồn tại
                        }
                        // Tạo mới CKEditor cho textarea
                        CKEDITOR.replace(id, {
                            height: '400px',
                            customConfig: '/Areas/Admin/Content/ckeditor/config.js',
                            language: 'vi',
                            filebrowserUploadUrl: '/Admin/Upload/UploadImage',
                            filebrowserUploadMethod: 'form'
                        });
                    });
                }
            });
        });
        // Submit edit
        $(document).on('submit', '#form-edit', function (e) {
            e.preventDefault();

            const form_data = new FormData(this);
            const id = $(this).find("input[name='id']").val();

            $.ajax({
                url: '/Admin/RoomInfoes/Edit/' + id,
                type: 'POST',
                data: form_data,
                contentType: false,
                processData: false,
                success: function (response) {
                    console.log(response);
                    if (response.code === 200) {
                        $('#modalRoom').find('.close').click();
                        LoadRoom();
                    } else {
                        alert(response.msg);
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Lỗi:', error);
                    alert("Có lỗi xảy ra khi cập nhật room.");
                }
            });
        });

        // Submit delete
        $(document).on('submit', '#form-delete', function (e) {
            e.preventDefault();

            const id = $(this).find("input[name='id']").val();
            const token = $('input[name="__RequestVerificationToken"]').val();

            $.ajax({
                url: '/Admin/RoomInfoes/DeleteConfirmed',
                type: 'POST',
                data: { id: id, __RequestVerificationToken: token },
                success: function (response) {
                    console.log(response);
                    if (response.code == 200) {
                        $('#modalRoom').find('.close').click();
                        LoadRoom();
                    } else {
                        alert(response.msg);
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Lỗi:', error);
                    console.error('Mã trạng thái:', xhr.status);
                    console.error('Nội dung lỗi:', xhr.responseText);
                    alert("Có lỗi xảy ra khi xóa room. Vui lòng kiểm tra log lỗi.");
                }
            });
        });

        // dùng ckeditor
        $(document).ready(function () {
            // Danh sách các trường cần tích hợp CKEditor
            const editorFields = [
                "detail_description"
            ];
            editorFields.forEach(function (fieldId) {
                CKEDITOR.replace(fieldId, {
                    height: '600px',
                    customConfig: '/Areas/Admin/Content/ckeditor/config.js',
                    language: 'vi',
                    filebrowserUploadUrl: '/Admin/Upload/UploadImage',
                    filebrowserUploadMethod: 'form'
                });
            });
        });
        $(document).on('shown.bs.modal', '#modalRoom', function () {
            // Xóa các instance CKEditor cũ trước khi tạo mới
            $('#modalRoom').find('textarea').each(function () {
                var id = $(this).attr('id');
                if (CKEDITOR.instances[id]) {
                    CKEDITOR.instances[id].destroy(true);
                    // Hủy CKEditor instance nếu tồn tại
                }
                // Tạo mới CKEditor cho textarea
                CKEDITOR.replace(id, {
                    height: '400px',
                    customConfig: '/Areas/Admin/Content/ckeditor/config.js',
                    language: 'vi',
                    filebrowserUploadUrl: '/Admin/Upload/UploadImage',
                    filebrowserUploadMethod: 'form'
                });
            });
        });
    </script>

    <script>
        // Ajax dropdownlist
        $(document).ready(function () {
            function getRoom() {
                var roomTypeId = $('#RoomType').val(); // Lấy giá trị roomTypeId
                console.log(roomTypeId); // In giá trị kiểm tra
                $.ajax({
                    url: '/Admin/RoomInfoes/getRoom',
                    type: "get",
                    data: { id: roomTypeId }, // Truyền roomTypeId vào data
                    success: function (data) {
                        if (data.code === 200) {
                            LoadRoom1(data.room); // Gọi hàm hiển thị với dữ liệu trả về
                        } else {
                            $('#tbroom').html('<tr><td colspan="8">Không có room.</td></tr>');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Lỗi:', error);
                        alert("Không thể tải room.");
                    }
                });
            }

            // Lấy Room khi thay đổi RoomType
            $("#RoomType").change(function () {
                getRoom();
            });

            // Gọi hàm khi tải trang lần đầu
            getRoom();
        });

        // Thêm ảnh vào table Images của mỗi roomInfoes
        let imageIndex = 0;

        function addImageRow() {
            const row = `
            <tr id="image-row-${imageIndex}">
                <td>
                    <input type="file" name="Images[${imageIndex}].File" accept=".jpg, .png, .jpeg" onchange="previewImage(this, ${imageIndex})" />
                    <img id="preview-${imageIndex}" src="" style="width: 100px; margin-top: 5px;" />
                </td>
                <td>
                    <input type="text" name="Images[${imageIndex}].Meta" class="form-control" placeholder="Mô tả ảnh" />
                </td>
                <td>
                    <input type="checkbox" name="Images[${imageIndex}].Hide" value="false" />
                </td>
                <td>
                    <button type="button" class="btn btn-danger" onclick="removeImageRow(${imageIndex})">Xóa</button>
                </td>
            </tr>`;
            document.getElementById("image-list").insertAdjacentHTML("beforeend", row);
            imageIndex++;
        }

        function previewImage(input, index) {
            const file = input.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    document.getElementById(`preview-${index}`).src = e.target.result;
                };
                reader.readAsDataURL(file);
            }
        }

        function removeImageRow(index) {
            document.getElementById(`image-row-${index}`).remove();
        }
        // Edit ảnh trên Images của mỗi roomInfoes
        let newImageIndex = -1; // Dùng index âm để phân biệt ảnh mới
        let deletedImageIds = []; // Mảng lưu trữ các ID ảnh bị xóa

        // Thêm một hàng ảnh mới
        function addImageRowEdit() {
            const row = `
            <tr id="image-row-${newImageIndex}">
                <td>
                    <input type="file" name="Images[${newImageIndex}].File" accept=".jpg, .png, .jpeg" onchange="previewImage(this, ${newImageIndex})" class="form-control" />
                    <img id="preview-${newImageIndex}" src="" alt="Ảnh xem trước" class="img-thumbnail" style="width: 100px; margin-top: 5px;" />
                </td>
                <td>
                    <input type="text" name="Images[${newImageIndex}].Meta" class="form-control" placeholder="Mô tả ảnh" />
                </td>
                <td>
                    <input type="checkbox" name="Images[${newImageIndex}].Hide" />
                </td>
                <td>
                    <button type="button" class="btn btn-danger" onclick="removeImageRowEdit(${newImageIndex})">Xóa</button>
                </td>
            </tr>`;
            document.getElementById("image-table").querySelector("tbody").insertAdjacentHTML("beforeend", row);
            newImageIndex--; // Giảm index để tiếp tục phân biệt các ảnh mới
        }

        // Xóa một hàng ảnh khỏi giao diện
        function removeImageRowEdit(index) {
            const row = document.getElementById(`image-row-${index}`);
            if (row) {
                row.remove();
                deletedImageIds.push(index); // Thêm vào danh sách ảnh bị xóa
            }
        }

        // Trước khi gửi form, thêm danh sách các ảnh bị xóa vào input hidden
        function prepareFormData() {
            let deletedInput = document.createElement("input");
            deletedInput.type = "hidden";
            deletedInput.name = "DeletedImageIds";
            deletedInput.value = JSON.stringify(deletedImageIds); // Chuyển danh sách ID ảnh đã xóa thành chuỗi JSON
            document.getElementById("editForm").appendChild(deletedInput); // Thêm vào form
        }



    </script>

    <script src="~/Areas/Admin/Content/ckfinder/ckfinder.js"></script>
    <script src="~/Areas/Admin/Content/ckeditor/ckeditor.js"></script>

    <script>
        $(document).on('keyup', '#title', function () {
            var text = $.trim($(this).val().toLowerCase());
            var text_create;

            text_create = text
                .replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, "a")
                .replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, "e")
                .replace(/ì|í|ị|ỉ|ĩ/g, "i")
                .replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, "o")
                .replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, "u")
                .replace(/ỳ|ý|ỵ|ỷ|ỹ/g, "y")
                .replace(/đ/g, "d")
                .replace(/\s+/g, '-')
                .replace(/-+/g, '-')
                .replace(/^-+|-+$/g, '');

            $('#meta').val(text_create);
        }).keyup();
    </script>
}